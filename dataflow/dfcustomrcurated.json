{
	"name": "dfcustomrcurated",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dscustomerstaging",
						"type": "DatasetReference"
					},
					"name": "customerstaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dscustomercurated",
						"type": "DatasetReference"
					},
					"name": "sinkgoodrows"
				},
				{
					"dataset": {
						"referenceName": "dscustomerbadparquet",
						"type": "DatasetReference"
					},
					"name": "sinkbadrows"
				}
			],
			"transformations": [
				{
					"name": "distinctcustomer"
				},
				{
					"name": "filtercustomer"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customerstaging",
				"customerstaging aggregate(groupBy(CustomerID),",
				"     {First Name} = first({FirstName}),",
				"          {Last Name} = first({LastName}),",
				"          Gender = first(Gender)) ~> distinctcustomer",
				"derivedColumn1 split(isInteger(CustomerID),",
				"     disjoint: false) ~> filtercustomer@(goodcustomerid, badcustomerid)",
				"distinctcustomer derive(Gender = iif(isNull(Gender),'Unknown Gender',Gender)) ~> derivedColumn1",
				"filtercustomer@goodcustomerid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkgoodrows",
				"filtercustomer@badcustomerid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkbadrows"
			]
		}
	}
}