{
	"name": "dfgoldfastmovingproduct",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dssilversalesparquet",
						"type": "DatasetReference"
					},
					"name": "srcsilversales"
				},
				{
					"dataset": {
						"referenceName": "dssilverproductparquet",
						"type": "DatasetReference"
					},
					"name": "srcsilverproduct"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "joinsalesproduct"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "sort1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as string,",
				"          CustomerID as string,",
				"          ProductID as string,",
				"          Quantity as integer,",
				"          SaleDate as date,",
				"          Revenue as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('hash', 1)) ~> srcsilversales",
				"source(output(",
				"          productid as string,",
				"          productname as string,",
				"          productcategory as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> srcsilverproduct",
				"srcsilversales, srcsilverproduct join(srcsilversales@ProductID == srcsilverproduct@productid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> joinsalesproduct",
				"joinsalesproduct select(mapColumn(",
				"          ProductID = srcsilversales@ProductID,",
				"          Quantity,",
				"          Revenue,",
				"          productname,",
				"          productcategory",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(ProductID),",
				"     productname = first(productname),",
				"          productcategory = first(productcategory),",
				"          Quantity = sum(Quantity),",
				"          Revenue = sum(Revenue),",
				"     partitionBy('hash', 1)) ~> aggregate1",
				"aggregate1 sort(desc(Revenue, true),",
				"     desc(Quantity, true),",
				"     partitionBy('hash', 1)) ~> sort1"
			]
		}
	}
}